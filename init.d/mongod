#!/bin/bash
# =============================================================================
# @file    mongod
# @brief   /etc/init.d/mongod init script for CentOS
# @author  Michael Hucka <mhucka@caltech.edu>
# @website https://github.com/casics/casicsdb
#
# This started life as the init script provided by MongoDB ... somewhere.
# I regret I no longer remember where it first came from, or what the original
# licensing terms were.
# =============================================================================

SYSTEMCTL_SKIP_REDIRECT=1

# Beware that the next command hijacks the entire process. If
# debugging this file, comment this out first.

. /etc/rc.d/init.d/functions

mongod=${MONGOD-/usr/bin/mongod}

MONGO_USER=mongod
MONGO_GROUP=mongod
PIDFILEPATH=/var/run/mongod/mongod.pid

start()
{
    # This seems to go missing after a computer reboot.
    mkdir -p /var/run/mongod
    chown mongod.mongod /var/run/mongod /var/run/mongod/*.pid

    # Recommended ulimit values for mongod or mongos
    # See http://docs.mongodb.org/manual/reference/ulimit/#recommended-settings
    #
    # 2016-05-07 <mhucka@caltech.edu>
    # The following set of ulimit commands was not sufficient.  I had to add
    # the file /etc/security/limits.d/99-mongodb-nproc.conf on our CentOS
    # system to get rid of some other limits that Mongo complained about when
    # it started up.

    ulimit -f unlimited
    ulimit -t unlimited
    ulimit -v unlimited
    ulimit -n 64000
    ulimit -m unlimited
    ulimit -u 64000

    echo -n $"Starting mongod: "

    # 2016-05-06 <mhucka@caltech.edu>
    # I can't figure out why I have to give all the options like --port on
    # the command line here.  If you omit them, mongod doesn't get them,
    # even though they're specified in /etc/mongod.conf.

    runuser -u mongod numactl -- --interleave=all /usr/bin/mongod --port 9988 --bind_ip `hostname -I` --auth --fork --logpath=/var/log/mongod/mongod.log --dbpath=/ssdraid/casicsdb/db --directoryperdb --pidfilepath=$PIDFILEPATH

    RETVAL=$?
    echo
    [ $RETVAL -eq 0 ] && touch /var/lock/subsys/mongod
}

stop()
{
    echo -n $"Stopping mongod: "
    mongo_killproc "$PIDFILEPATH" $mongod
    RETVAL=$?
    echo
    [ $RETVAL -eq 0 ] && rm -f /var/lock/subsys/mongod
}

restart () {
    stop
    start
}

# Send TERM signal to process and wait up to 300 seconds for process to go away.
# If process is still alive after 300 seconds, send KILL signal.
# Built-in killproc() (found in /etc/init.d/functions) is on certain versions of Linux
# where it sleeps for the full $delay seconds if process does not respond fast enough to
# the initial TERM signal.
mongo_killproc()
{
    local pid_file=$1
    local procname=$2
    local -i delay=300
    local -i duration=10
    local pid=`pidofproc -p "${pid_file}" ${procname}`

    kill -TERM $pid >/dev/null 2>&1
    usleep 100000
    local -i x=0
    while [ $x -le $delay ] && checkpid $pid; do
        sleep $duration
        x=$(( $x + $duration))
    done

    kill -KILL $pid >/dev/null 2>&1
    usleep 100000

    checkpid $pid # returns 0 only if the process exists
    local RC=$?
    [ "$RC" -eq 0 ] && failure "${procname} shutdown" || rm -f "${pid_file}"; success "${procname} shutdown"
    RC=$((! $RC)) # invert return code so we return 0 when process is dead.
    return $RC
}

RETVAL=0

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart|reload|force-reload)
        restart
        ;;
    condrestart)
        [ -f /var/lock/subsys/mongod ] && restart || :
        ;;
    status)
        status $mongod
        RETVAL=$?
        ;;
    *)
        echo "Usage: $0 {start|stop|status|restart|reload|force-reload|condrestart}"
        RETVAL=1
esac

exit $RETVAL
